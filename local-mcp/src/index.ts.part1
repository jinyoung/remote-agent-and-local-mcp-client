import { MultiServerMCPClient } from "@langchain/mcp-adapters";
import cors from "cors";
import EventSource from "eventsource";
import express from "express";
import fetch from "node-fetch";

const CLOUD_HOST = "http://127.0.0.1:8000";
const CLIENT_ID = "test-client-1";
const API_PORT = 3000;

interface CommandEvent {
    data: string;
    type: string;
    lastEventId: string;
}

interface CommandData {
    id: string;
    tool: string;
    params: Record<string, unknown>;
}

// Schema interfaces for tool parameters
interface ParameterProperty {
    type?: string;
    description?: string;
    [key: string]: any;
}

interface ToolSchema {
    properties?: Record<string, ParameterProperty>;
    [key: string]: any;
}

interface Tool {
    name: string;
    description?: string;
    schema?: ToolSchema;
    invoke: (params: any) => Promise<any>;
    [key: string]: any;
}

async function main() {
    // Initialize MCP client with local tools
    const client = new MultiServerMCPClient({
        playwright: {
            transport: "stdio",
            command: "npx",
            args: ["@playwright/mcp@latest"]
        }
    });

    try {
        // Initialize tools
        const tools = await client.getTools() as Tool[];
        console.log("Available tools:", tools.map(t => t.name));

        // Start HTTP server to expose tool definitions (keep for local development)
        const app = express();
        app.use(cors());
        app.use(express.json());

        // Endpoint to get tool definitions
        app.get('/tools', (req, res) => {
            const toolDefinitions = generateToolDefinitions(tools);
            res.json(toolDefinitions);
        });

        // Start the HTTP server
        app.listen(API_PORT, () => {
            console.log(`Tool definition API listening at http://localhost:${API_PORT}`);
        });

        // Connect to cloud agent via SSE
        const eventSource = new EventSource(`${CLOUD_HOST}/connect/${CLIENT_ID}`, {
            headers: {
                'Accept': 'text/event-stream'
            }
        });

        console.log(`Connecting to ${CLOUD_HOST}/connect/${CLIENT_ID}`);

        eventSource.onopen = async () => {
            console.log("SSE connection established successfully");
            
            // Send tool definitions to remote-agent on connection
            const toolDefinitions = generateToolDefinitions(tools);
            try {
                const response = await fetch(`${CLOUD_HOST}/register_tools/${CLIENT_ID}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        tools: toolDefinitions
                    }),
                });
                
                if (response.ok) {
                    console.log("Tool definitions sent to remote-agent:", await response.json());
                } else {
                    console.error("Failed to send tool definitions:", response.status, await response.text());
                }
            } catch (error) {
                console.error("Error sending tool definitions:", error);
            }
        };

        eventSource.onmessage = async (event: MessageEvent) => {
            if (event.type === "command") {
                try {
                    const data = JSON.parse(event.data) as CommandData;
                    console.log("Command event received:", data);

                    // Execute the command using appropriate tool
                    const exactTool = tools.find(t => t.name === data.tool);
                    const partialMatchTool = exactTool || tools.find(t => 
                        t.name.includes('playwright') && 
                        (t.name.includes('navigate') || t.name.includes('browser'))
                    );
                    const tool = exactTool || partialMatchTool;

                    if (tool) {
                        console.log(`Found tool: ${tool.name}, executing with params:`, data.params);
                        const result = await tool.invoke(data.params);
                        console.log(`Tool execution result:`, result);
                        
                        // Send result back to cloud agent
                        const response = await fetch(`${CLOUD_HOST}/result/${CLIENT_ID}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                commandId: data.id,
                                result: result
                            }),
                        });
                        console.log("Result sent:", await response.json());
                    } else {
                        console.error(`Tool ${data.tool} not found. Available tools:`, tools.map(t => t.name));
                    }
                } catch (error) {
                    console.error("Error processing command event:", error);
                }
            } else if (event.type === "heartbeat") {
                console.log("Heartbeat received:", event.data);
            }
        };

        eventSource.onerror = (error: Event) => {
            console.error("SSE connection error:", error);
            // Implement reconnection logic if needed
            setTimeout(() => {
                console.log("Attempting to reconnect...");
                eventSource.close();
                main();
            }, 5000);
        };

        // Keep the process running
        await new Promise(() => {});
    } catch (error) {
        console.error("Error in main:", error);
        process.exit(1);
    }
}

// Helper function to generate tool definitions
